1. 응용SW기초 기술 활용
프로토콜
컴퓨터나 서버 사이에서 데이터를 전송하기 위한
표준화된 약속 혹은 절차. 
즉, 통신 규약 및 약속

TCP, UDP(전송계층의 프로토콜)
TCP: 데이터를 안정적으로, 순서대로, 에러없이 교환 가능
UDP: 속도는 빠르지만 데이터 전송의 신뢰성이 보장되지 않음

URL 쿼리스트링
http://www.codns.com:80/codns/codns.jsp?id=1
http: 통신 프로토콜
www~com: 도메인
80: 포트번호(기본 80, 80이면 생략가능)
codns: 디렉토리
codns.jsp: 파일
?id=1: 쿼리스트링

포트
컴퓨터가 각종 신호, 정보 등을 주고 받을 수 있게 해주는 통신 통로

request, response
requset는 클라이언트가 서버에 요청하는 것
response는 서버가 클라이언트에게 응답하는 것

Tomcat WAS
톰캣은 WAS(웹 어플리케이션 서버 = 웹 서버+웹 컨테이너)이다
현재(톰캣6버전 이상)는 톰캣만 설치해도 어느정도 웹 서버 역할 가능

create table 테이블명 (컬럼명 자료형);

select 컬럼1, 컬럼2... from 테이블명;


2. 데이터베이스 구현
insert(데이터 추가)
insert into 테이블명(컬럼1, 컬럼2...) values(값1, 값2...);	일부 컬럼만
insert into 테이블명 values(값1, 값2...);			전체 컬럼

delete(데이터 삭제)
delete from 테이블명 where 컬럼 = 특정값;	특정 레코드 삭제
delete from 테이블명;			전체 레코드 삭제

update(데이터 수정)
update 테이블명 set 컬럼 = 변경할값 where 컬럼 = 특정값;

alter(컬럼 추가 삭제 변경)
alter table 테이블명 add 컬럼명 컬럼타입;			컬럼 추가
alter table 테이블명 modify(컬럼명1 컬럼타입, 컬럼명2 컬럼타입...);	컬럼 속성 변경
alter table 테이블명 drop 컬럼명 컬럼타입;			컬럼 삭제

select 컬럼1, 컬럼2... from 테이블명 where 조건;

like(문자열 포함)
컬럼명 like '문자%';	값이 문자로 시작하는
컬럼명 like '%문자%';	값이 문자를 포함하는
컬럼명 lkie '%문자';	값이 문자로 끝나는

is null, is not null(null값인지 아닌지)
컬럼명 is null;		null인 값?
컬럼명 is not null;		null이 아닌 값?

between(범위에 포함되는지)
컬럼명 between A and B;	A와 B 사이에 있는 값

sum, avg, count
sum(컬럼)	합계
avg(컬럼)		평균
count(컬럼)	개수


3. SQL작성
create table 외래키(FK) 지정(ERD)
외래키(FK) = 다른 테이블의 기본키(PK)를 참조하는 컬럼
create table 테이블b (
컬럼 자료형 not null,
constraint 컬럼 foreign key(컬럼) references 테이블a(컬럼);	
);	테이블 b의 컬럼은 테이블 a의 PK컬럼을 참조한다.

참조무결성
외래키 값은 참조하는 컬럼의 기본키 값이거나 null 값이어야 한다.

equi join
공통 컬럼의 값이 일치하는 행을 가져옴
select *
from table1 t1, table2 t2
where t1.key = t2.key;

right join
교집합 부분(키가 일치하는 부분) + 오른쪽 테이블(모든 레코드)
select *
from table1 t1
right join table2 t2
on (t1.key = t2.key);

natural join
왼쪽, 오른쪽 테이블에서 같은 이름을 가진 컬럼들이 모두 동일한 데이터를 가지고 있을때만 출력
select *
from table1 t1
natural join table2 t2;

full outer join
두 테이블의 모든 레코드를 합친다
select *
from table1 t1
full outer join table2 t2
on (t1.key = t2.key);

집합연산자
union	테이블 구조가 일치하는 테이블을 병합
select *
from 테이블1
union all(중복 포함) union(중복 제외) intersect(공통 부분만 중복 제거해서 조회)
minus(앞 테이블에서 뒷 테이블과 중복되는 부분을 제거하고 조회 = 앞 테이블만 가지고 있는 부분)
select *
from 테이블2;


4. SQL활용
DML(데이터 조작어)
insert(데이터 입력), update(데이터 수정), delete(데이터 삭제)

트랜잭션
쪼개질 수 없는 업무처리의 단위 -> 논리적인 업무처리 단위

commit, rollback(트랜잭션을 제어하는 명령어)
commit	DML 후 변경된 내용을 확정, 반영하는 명령어 commit 후에는 rollback 불가
rollback	DML 후 변경된 내용을 취소하는 명령어

sequence
create sequence 스키마명.시퀀스명
	increment by 1	증가값
	start with 1	시작값
	minvalue 1	최솟값
	maxvalue 9999	최댓값
	nocycle		최댓값 도달시 시작값부터 반복여부
	nocache		cache(값을 미리 할당) 사용여부
	noorder;		요청 순서대로 값 생성할지 여부

시퀀스명.nextval	시퀀스 증가
시퀀스명.currval	시퀀스 현재값
from dual;로 확인
alter sequence 시퀀스명 increment by 2;	증가값 변경
alter sequence 시퀀스명 maxvalue 99999;	최대값 변경
drop sequence 시퀀스명			시퀀스 삭제

select * from 테이블 where date타입;

group by, having
having: group by절 사용 시 where절처럼 사용하는 조건절
select문 논리적 수행 순서
select	-1
from	-2
where	-3
group by	-4
having	-5
order by	-6

서브쿼리
select절		스칼라 서브쿼리
form절		인라인 뷰
where, having절	중첩 서브쿼리

view(가상 테이블, 논리 테이블)
create or replace view 뷰이름 as 생성할 테이블 쿼리문;
drop view view이름;	view 삭제

drop table 테이블명;	테이블 삭제

